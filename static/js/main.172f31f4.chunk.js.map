{"version":3,"sources":["img/checklist.png","component/AddTask.js","component/Task.js","component/TaskList.js","component/Img.js","component/App.js","serviceWorker.js","index.js"],"names":["module","exports","AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","props","add","maxDate","this","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","task","active","important","finishDate","style","color","fontWeight","fontSize","textTransform","change","delete","finish","toLocaleDateString","TaskList","tasks","filter","done","length","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","Img","src","picture","alt","class","App","counter","addTask","prevState","alert","deleteTask","console","log","changeTaskStatus","forEach","getTime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.172f31f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checklist.9568c0c2.png\";","import React, { Component } from \"react\";\r\nimport \"../css/AddTask.css\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate\r\n  };\r\n  handleText = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n  handleCheckbox = e => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    });\r\n  };\r\n  handleDate = e => {\r\n    this.setState({\r\n      date: e.target.value\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { text, checked, date } = this.state;\r\n    const add = this.props.add(text, date, checked);\r\n    if (add) {\r\n      this.setState({\r\n        text: \"\",\r\n        checked: false,\r\n        date: this.minDate\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n    return (\r\n      <div className=\"from\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Dodaj zadanie\"\r\n          value={this.state.text}\r\n          onChange={this.handleText}\r\n        />\r\n        <input\r\n          id=\"important\"\r\n          type=\"checkbox\"\r\n          onChange={this.handleCheckbox}\r\n          checked={this.state.checked}\r\n        />\r\n        <label htmlFor=\"important\" className=\"priority\">\r\n          Priorytet\r\n        </label>\r\n        <br />\r\n        <label htmlFor=\"date\">Termin:</label>\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.minDate}\r\n          max={maxDate}\r\n          onChange={this.handleDate}\r\n        />\r\n        <br />\r\n        <button onClick={this.handleClick}>Dodaj</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = props => {\r\n  const style = {\r\n    color: \"#ea5514\",\r\n    fontWeight: \"solid\",\r\n    fontSize: \"18px\",\r\n    textTransform: \"uppercase\"\r\n  };\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong>\r\n          <br /> do <span>{date}</span>\r\n          <button onClick={() => props.change(id)}>\r\n            {active ? \"Zrobione!\" : \"Do zrobienia\"}\r\n          </button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleDateString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong>\r\n          <br />\r\n          <em>\r\n            <br />\r\n            <span>Termin: {date}</span>\r\n            <br />\r\n            <span>Wykonano: {finish}</span>\r\n          </em>\r\n          <button onClick={() => props.change(id)}>\r\n            {active ? \"Zrobione!\" : \"Cofnij\"}\r\n          </button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nimport \"../css/TaskList.css\";\r\n\r\nconst TaskList = props => {\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => b.finishDate - a.finishDate);\r\n  }\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n      return a - b;\r\n    });\r\n  }\r\n  const activeTasks = active.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  const doneTasks = done.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  return (\r\n    <div className=\"TaskList\">\r\n      <div className=\"active\">\r\n        <h1>Zadania do zrobienia</h1>\r\n        {activeTasks.length > 0 ? activeTasks : \"Brak zadań do zrobienia\"}\r\n      </div>\r\n      <br />\r\n      <div className=\"done\">\r\n        <h3>\r\n          Zadania wykonane: <em>{doneTasks.length}</em>\r\n        </h3>\r\n        {doneTasks.length > 5 && (\r\n          <span\r\n            style={{\r\n              fontSize: 10\r\n            }}\r\n          >\r\n            Wyświetlonych jest jedynie 5 ostatnich elementów\r\n          </span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\nimport picture from \"../img/checklist.png\";\r\n\r\nconst Img = props => {\r\n  return <img src={picture} alt=\"\" className={props.class} />;\r\n};\r\n\r\nexport default Img;\r\n","import React, { Component } from \"react\";\n\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nimport Img from \"./Img\";\n\nimport \"../css/App.css\";\n\nclass App extends Component {\n  counter = 0;\n  state = {\n    tasks: []\n  };\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text, //tekst z inputa\n      date, //tekst z inputa\n      important, //wartość z inputa z inputa\n      active: true,\n      finishDate: null\n    };\n    this.counter++;\n    if (text.length > 3) {\n      this.setState(prevState => ({\n        tasks: [...prevState.tasks, task]\n      }));\n    } else {\n      alert(\"Nazwa powinna mieć conajmniej 3 znaki\");\n    }\n    return true;\n  };\n\n  deleteTask = id => {\n    console.log(\"delete w komponencie App\" + id);\n\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1);\n    // this.setState({\n    //   tasks\n    // });\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id);\n    this.setState({\n      tasks\n    });\n  };\n  changeTaskStatus = id => {\n    console.log(\"change w komponencie App\" + id);\n\n    let tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = !task.active;\n        task.finishDate = new Date().getTime();\n        console.log(task.active);\n      }\n    });\n    this.setState({\n      tasks\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Form\">\n          <h1>Lista zadań</h1>\n          <h2>\n            Dodaj zadanie do listy do wykonania. Pozycje, które znajdą się na\n            liście możesz usunąć lub oznaczyć jako wykonane.\n          </h2>\n          <AddTask add={this.addTask} />\n          <TaskList\n            tasks={this.state.tasks}\n            delete={this.deleteTask}\n            change={this.changeTaskStatus}\n          />\n        </div>\n        <Img class=\"img\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./component/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}